apply plugin: "com.android.application"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

import com.android.build.OutputFile

// You can find more informations about this file here:
// https://github.com/facebook/react-native/blob/master/template/android/app/build.gradle

project.ext.react = [
    entryFile: "index.js"
]
apply from: "../../node_modules/react-native/react.gradle"

project.ext.vectoricons = [
    iconFontNames: [ 'FontAwesome5_Solid.ttf', 'FontAwesome5_Brands.ttf', 'FontAwesome5_Regular.ttf' ] // Name of the font files you want to copy
]
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId project.env.get("com.freeformers.b2c.digitalmentor")
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 283
        versionName "1.0"
        multiDexEnabled true
        testBuildType System.getProperty('testBuildType', 'debug')  // This will later be used to control the test apk build type
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    signingConfigs {
        release {
            if (project.hasProperty('DIGITAL_MENTOR_RELEASE_STORE_FILE')) {
                storeFile file(DIGITAL_MENTOR_RELEASE_STORE_FILE)
                storePassword DIGITAL_MENTOR_RELEASE_STORE_PASSWORD
                keyAlias DIGITAL_MENTOR_RELEASE_KEY_ALIAS
                keyPassword DIGITAL_MENTOR_RELEASE_KEY_PASSWORD
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation project(':react-native-keep-awake')
    implementation project(':rollbar-react-native')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation project(':@react-native-community_async-storage')
    implementation project(':lottie-react-native')
    implementation project(':react-native-branch')
    implementation project(':react-native-config')
    implementation project(':react-native-device-info')
    implementation project(':react-native-email-link')
    implementation project(':react-native-intercom')
    implementation project(':react-native-restart')
    implementation project(':react-native-splash-screen')
    implementation project(':react-native-uuid-generator')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-webview')
    implementation project(':react-native-wheel-pick')
    implementation "io.intercom.android:intercom-sdk-base:5.+"
    implementation "io.intercom.android:intercom-sdk-fcm:5.+"
    implementation "com.google.firebase:firebase-core:16.0.3"
    implementation "com.google.firebase:firebase-messaging:17.3.2"
    androidTestImplementation('com.wix:detox:+') { transitive = true }
    androidTestImplementation 'junit:junit:4.12'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

// It is important that this is at the very end of the file.
// https://developers.intercom.com/installing-intercom/docs/android-fcm-push-notifications
apply plugin: 'com.google.gms.google-services'
