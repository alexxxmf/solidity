# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

APP_SCHEME = 'digitalmentor'
SCREENSHOT_SCHEME = 'digitalmentorUITests'

platform :ios do
  before_all do
    setup_circle_ci
  end

  def xcode_version_select
    xcversion(version: '10.2.0')
  end

  def version_string
    "#{get_version_number} (#{get_build_number})"
  end

  desc 'Export build number as ENV variable'
  lane :export_build_number do
    build_number = get_build_number
    File.write("build_version_TMP.txt", build_number)
  end

  desc 'Register new devices to build/test/debug from Xcode'
  lane :add_device do
    register_device(
      name: "Navi",
      udid: "8fe5bfa6fe3956f006281ec18ffa92920e318425"
    )
  end



  desc 'Check that the current build number is higher than the one in Testflight'
  lane :check_build_number_versus_testflight do
    check_current_greater_than_live_version

    tf_build_number = latest_testflight_build_number(version: get_version_number, initial_build_number:-100)

    curr_build_number = get_build_number

    if curr_build_number.to_i <= tf_build_number.to_i
      UI.user_error!("Your build number #{curr_build_number} is not higher than TestFlight's #{tf_build_number} for app version #{get_version_number}. Run the `bump_build` lane.")
      return 1
    end

    pending_store_build_number = app_store_build_number(version: get_version_number, live: false, initial_build_number:-100)

    if curr_build_number.to_i <= pending_store_build_number.to_i
      UI.user_error!("Your build number #{curr_build_number} is not higher than the pending App Store release's #{pending_store_build_number} for app version #{get_version_number}. Run the `bump_build` lane.")
      return 1
    end

    live_store_build_number = app_store_build_number(version: get_version_number, live: true)

    if curr_build_number.to_i <= live_store_build_number.to_i
      UI.user_error!("Your build number #{curr_build_number} is not higher than the live App Store release's #{live_store_build_number} for app version #{get_version_number}. Run the `bump_build` lane.")
      return 1
    end
  end

  desc 'Submit a new Beta Build to Apple TestFlight'
  desc 'This will also make sure the profile is up to date'
  lane :release_to_beta do
    check_build_number_versus_testflight
    match(type: 'appstore')
    xcode_version_select
    build_app(
      scheme: APP_SCHEME.to_s,
      export_options: {
        method: 'app-store',
        provisioningProfiles: {
          'com.freeformers.b2c.digitalmentor' => 'match AppStore com.freeformers.b2c.digitalmentor'
        }
      }
    )
    upload_to_testflight(
      skip_waiting_for_build_processing: true
    )
    slack(
      message: "🍏 New iOS build launched. Coming to a TestFlight app near you soon.",
      use_webhook_configured_username_and_icon: true,
      payload: {
        'Version' => "#{get_version_number} #{(get_build_number)}"
      },
      default_payloads: [:git_author]
    )
  end

  def git_commit_bump(bump_type_prefix)
    git_commit(
      path: [
        "./#{APP_SCHEME}.xcodeproj",
        "./#{APP_SCHEME}/Info.plist",
        "./#{APP_SCHEME}Tests/Info.plist",
        "./#{SCREENSHOT_SCHEME}/Info.plist"
      ],
      message: "iOS: Bump #{bump_type_prefix} to #{version_string}"
    )
  end

  desc 'Bump patch'
  lane :bump_patch do
    increment_build_number
    increment_version_number(bump_type: 'patch')
    git_commit_bump('Version')
  end

  desc 'Bump minor'
  lane :bump_minor do
    increment_build_number
    increment_version_number(bump_type: 'minor')
    git_commit_bump('Version')
  end

  desc 'Bump major'
  lane :bump_major do
    increment_build_number
    increment_version_number(bump_type: 'major')
    git_commit_bump('Version')
  end

  desc 'Bump build'
  lane :bump_build do
    increment_build_number
    git_commit_bump('Build')
  end

  desc 'Push a new beta build to TestFlight'
  lane :beta do
    ensure_git_status_clean
    increment_build_number(xcodeproj: "#{APP_SCHEME}.xcodeproj")
    build_app(
      scheme: APP_SCHEME.to_s,
      export_options: {
        method: 'app-store',
        provisioningProfiles: {
          'com.freeformers.b2c.digitalmentor' => 'match AppStore com.freeformers.b2c.digitalmentor'
        }
      }
    )
    upload_to_testflight
    commit_version_bump(
      ignore: /node_modules/
    )
  end

  lane :makeicons do
    appicon(
      appicon_devices: [:ipad, :iphone, :ios_marketing],
      appicon_image_file: 'fastlane/metadata/app_icon.png',
      appicon_path: 'digitalmentor/Images.xcassets'
    )
  end

  desc 'Screenshot application and upload to App Store'
  lane :screenshots do
    capture_screenshots
    # Don't upload for now because there is some issues to fix for the user flow
    # More example https://github.com/fastlane/fastlane/blob/master/snapshot/example/ExampleUITests/ExampleUITests.swift
    # upload_to_app_store
  end

  desc "Check that the current application version is not the same as the published live one"
  lane :check_current_greater_than_live_version do
    require 'spaceship'
    Spaceship::Tunes.login
    app = Spaceship::Tunes::Application.find("com.freeformers.b2c.digitalmentor")

    version = app.live_version
    latest_app_version = version.raw_data["version"]
    our_version = get_version_number

    UI.message("Latest live version: #{latest_app_version['value']}")

    UI.message("Our version #{our_version}")

    if latest_app_version['value'] == our_version
      UI.user_error!("Current version is already live in the store and so won't be able to re-publish it. Run `yarn bump-ios-patch`.")
      return 1
    end

  end
end
