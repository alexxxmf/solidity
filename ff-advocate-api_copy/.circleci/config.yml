version: 2.1

orbs:
  slack: circleci/slack@volatile
  rollbar: rollbar/deploy@1.0.1

jobs:
  build_python:
    docker:
      - image: circleci/python:3.7.1
      - image: circleci/postgres:9.6
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: circle_test
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: v1-py37-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "test-requirements.txt" }}
      - run:
          name: "Python install dependencies"
          command: |
            virtualenv ~/venv
            . ~/venv/bin/activate
            pip install -r requirements.txt
            pip install -r test-requirements.txt
      - save_cache:
          key: v1-py37-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "test-requirements.txt" }}
          paths:
            - "~/venv"
      - run:
          name: "Python formatting"
          command: |
            . ~/venv/bin/activate
            black --check .
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: python-tests
  migrate_production:
    docker:
      - image: circleci/python:3.7.1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: v1-py37-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "test-requirements.txt" }}
      - run:
          name: "Python install dependencies"
          command: |
            virtualenv ~/venv
            . ~/venv/bin/activate
            pip install -r requirements.txt
            pip install -r test-requirements.txt
      - save_cache:
          key: v1-py37-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "test-requirements.txt" }}
          paths:
            - "~/venv"
      - run:
          name: "Setup Environment Variables"
          command: |
            echo 'export DATABASE_URL="$PRODUCTION_DATABASE_URL"' >> $BASH_ENV
            echo 'export DJANGO_DEBUG="$PRODUCTION_DJANGO_DEBUG"' >> $BASH_ENV
            echo 'export DJANGO_SECRET_KEY="$PRODUCTION_DJANGO_SECRET_KEY"' >> $BASH_ENV
            echo 'export ROLLBAR_ACCESS_TOKEN="$ROLLBAR_ACCESS_TOKEN"' >> $BASH_ENV
            echo 'export ROLLBAR_ENVIRONMENT="production"' >> $BASH_ENV
      - deploy:
          name: "Run Migration"
          command: |
            . ~/venv/bin/activate
            ./manage.py migrate

  deploy_production:
    docker:
      - image: circleci/python:3.7.1-node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: v1-py37-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "test-requirements.txt" }}
      - restore_cache:
          key: v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: "Python install dependencies"
          command: |
            virtualenv ~/venv
            . ~/venv/bin/activate
            pip install -r requirements.txt
            pip install -r test-requirements.txt
      - run:
          name: "JS install dependencies"
          command: yarn install --frozen-lockfile
      - save_cache:
          key: v1-py37-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "test-requirements.txt" }}
          paths:
            - "~/venv"
      - save_cache:
          key: v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - "node_modules"
      - run:
          name: "Setup Environment Variables"
          command: |
            echo 'DATABASE_URL="$PRODUCTION_DATABASE_URL"' >> .env
            echo 'DJANGO_DEBUG="$PRODUCTION_DJANGO_DEBUG"' >> .env
            echo 'DJANGO_SECRET_KEY="$PRODUCTION_DJANGO_SECRET_KEY"' >> .env
            echo 'ROLLBAR_ACCESS_TOKEN="$ROLLBAR_ACCESS_TOKEN"' >> .env
            echo 'ROLLBAR_ENVIRONMENT="production"' >> .env
      - deploy:
          name: "Run Deployment"
          command: yarn sls deploy --aws-s3-accelerate --stage prod
      - rollbar/notify_deploy:
          environment: "production"

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build_python
      - migrate_production:
          filters:
            branches:
              only:
                - master
          requires:
            - build_python
      - deploy_production:
          filters:
            branches:
              only:
                - master
          requires:
            - migrate_production
