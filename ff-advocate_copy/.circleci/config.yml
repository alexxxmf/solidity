# iOS
macos_defaults: &macos_defaults
  macos:
    xcode: "10.2.0"

# -------------------------
#          JOBS
# -------------------------

# Check https://circleci.com/docs/2.0/language-javascript/ for more details
version: 2.1

orbs:
  slack: circleci/slack@1.0.0

jobs:
  build:
    working_directory: ~/repo
    docker:
      # specify the version you desire here
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/node:10

    steps:
      - checkout
      - restore_cache:
          key: yarn-v2-{{ checksum "yarn.lock" }}-{{ arch }}
      - restore_cache:
          key: node-v2-{{ checksum "package.json" }}-{{ arch }}
      - run: yarn install
      - save_cache:
          key: yarn-v2-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn
      - save_cache:
          key: node-v2-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules
      - run:
          name: Ensuring we have a clean status after linking
          command: yarn run ensure_everything_is_linked
      - run:
          name: Set ENV variables
          command: cp .env.beta .env
      - run:
          name: Run building tests
          command: |
            yarn lint
            yarn build:js:ios
            yarn build:js:android
      - run:
          name: Run Typescript compilation
          command: yarn tsc --noEmit
      - run:
          name: Confirm Typescript conversion
          command: ./check_for_typescript_conversion.sh
      - run:
          name: Run jest tests
          command: yarn run test

  check_android:
    docker:
      - image: circleci/android:api-28-node
    working_directory: ~/repo
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: check_version_code_versus_playstore
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Set Ruby Version
          command: echo "ruby-2.6.3" > ~/.ruby-version
      - run:
          name: Configure Bundler
          command: gem install bundler -v 2.0.1
      - run:
          name: Bundle install
          command: bundle install
          working_directory: ~/repo/android
      - run:
          name: Set ENV variables
          command: cp .env.beta .env
      - run:
          name: Fastlane
          command: bundle exec fastlane $FASTLANE_LANE --verbose
          working_directory: ~/repo/android

  playstore_android:
    docker:
      - image: circleci/android:api-28-node
    working_directory: ~/repo
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: release_to_alpha
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Set Ruby Version
          command: echo "ruby-2.6.3" > ~/.ruby-version
      - run:
          name: Configure Bundler
          command: gem install bundler -v 2.0.1
      - run:
          name: Bundle install
          command: bundle install
          working_directory: ~/repo/android
      - run:
          name: Load Keystore
          command: echo $RELEASE_KEYSTORE_BASE64 | base64 -d > app/ff-holdings-android-key.keystore
          working_directory: ~/repo/android
      - run:
          name: Set ENV variables
          command: cp .env.beta .env
      - run:
          name: Fastlane
          command: bundle exec fastlane $FASTLANE_LANE --verbose
          working_directory: ~/repo/android
      - store_artifacts:
          path: android/app/build/outputs/apk/release/app-release.apk
      - slack/status:
          fail_only: "true"

  produce_android_source_maps:
    docker:
      - image: circleci/android:api-28-node
    working_directory: ~/repo
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: export_build_number
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Set Ruby Version
          command: echo "ruby-2.6.3" > ~/.ruby-version
      - run:
          name: Configure Bundler
          command: gem install bundler -v 2.0.1
      - run:
          name: Bundle install
          command: bundle install
          working_directory: ~/repo/android
      - run:
          name: Set ENV variables
          command: cp .env.beta .env
      - run:
          name: Create source map for Android
          command: |
            yarn run build:js:android:map
          working_directory: ~/repo/android
      - run:
          name: Push source map to rollbar
          command: |
            curl https://api.rollbar.com/api/1/sourcemap \
             -F access_token=${ROLLBAR_POST_SERVER_ITEM_TOKEN} \
             -F version=$(cat android/fastlane/build_version_TMP.txt).android \
             -F minified_url=http://reactnativehost/main.jsbundle \
             -F source_map=@sourcemap.android.js.map \
             -F index.js=@index.js
          working_directory: ~/repo

  check_ios:
    <<: *macos_defaults
    working_directory: ~/repo
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: check_build_number_versus_testflight
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-macos-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-macos-dependencies-
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-macos-dependencies-{{ checksum "package.json" }}
      - run:
          name: Set Ruby Version
          command: echo "ruby-2.6.3" > ~/.ruby-version
      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            sudo gem install bundler
      - run:
          name: Bundle install
          command: bundle install
          working_directory: ~/repo/ios
      - run:
          name: Set ENV variables
          command: cp .env.beta .env
      - run:
          name: Fastlane
          command: bundle exec fastlane $FASTLANE_LANE --verbose
          working_directory: ~/repo/ios

  testflight_ios:
    <<: *macos_defaults
    working_directory: ~/repo
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: release_to_beta
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-macos-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-macos-dependencies-
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-macos-dependencies-{{ checksum "package.json" }}
      - run:
          name: Set Ruby Version
          command: echo "ruby-2.6.3" > ~/.ruby-version
      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            sudo gem install bundler
      - run:
          name: Bundle install
          command: bundle install
          working_directory: ~/repo/ios
      - run:
          name: Set ENV variables
          command: cp .env.beta .env
      - run:
          name: Print Xcode environment
          command: xcodebuild -version
      - run:
          name: Fastlane
          command: bundle exec fastlane $FASTLANE_LANE --verbose
          working_directory: ~/repo/ios
      - store_artifacts:
          path: ios/output/gym/digitalmentor.ipa

      - slack/status:
          fail_only: "true"

  produce_ios_source_maps:
    <<: *macos_defaults
    working_directory: ~/repo
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: export_build_number
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-macos-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-macos-dependencies-
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-macos-dependencies-{{ checksum "package.json" }}
      - run:
          name: Set Ruby Version
          command: echo "ruby-2.6.3" > ~/.ruby-version
      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            sudo gem install bundler
      - run:
          name: Bundle install
          command: bundle install
          working_directory: ~/repo/ios
      - run:
          name: Set ENV variables
          command: cp .env.beta .env
      - run:
          name: Fastlane
          command: bundle exec fastlane $FASTLANE_LANE --verbose
          working_directory: ~/repo/ios
      - run:
          name: Create source map for iOS
          command: |
            yarn run build:js:ios:map
          working_directory: ~/repo/ios
      - run:
          name: Push source map to rollbar
          command: |
            curl https://api.rollbar.com/api/1/sourcemap \
             -F access_token=${ROLLBAR_POST_SERVER_ITEM_TOKEN} \
             -F version=$(cat ios/fastlane/build_version_TMP.txt).iOS \
             -F minified_url=http://reactnativehost/main.jsbundle \
             -F source_map=@sourcemap.ios.js.map \
             -F index.js=@index.js
          working_directory: ~/repo

  test_e2e_ios:
    <<: *macos_defaults
    working_directory: ~/repo
    environment:
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-macos-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-macos-dependencies-
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-macos-dependencies-{{ checksum "package.json" }}
      - run:
          name: Tap Detox
          command: "brew tap wix/brew"
      - run:
          name: Install Detox utils
          command: "brew install applesimutils"
      - run:
          name: Install global detox
          command: "npm install -g detox-cli"
      - run:
          name: Prepare for Detox
          command: "detox clean-framework-cache && detox build-framework-cache"
      - run:
          name: Build test iOS app
          command: "yarn e2e:ios:build"
      - run:
          name: Run test iOS app
          command: "yarn e2e:ios:test"
      - store_artifacts:
          path: artifacts/ios
          destination: e2e-ios
      - store_test_results:
          path: artifacts/test-results

workflows:
  version: 2
  built_test_deploy:
    jobs:
      - build
      - check_android:
          requires:
            - build
          filters:
            branches:
              ignore:
                - master
      - check_ios:
          requires:
            - build
          filters:
            branches:
              ignore:
                - master
      - playstore_android:
          filters:
            branches:
              only:
                - develop
          requires:
            - test_e2e_ios
      - produce_android_source_maps:
          filters:
            branches:
              only:
                - develop
          requires:
            - playstore_android
      - testflight_ios:
          filters:
            branches:
              only:
                - develop
          requires:
            - test_e2e_ios
      - produce_ios_source_maps:
          filters:
            branches:
              only:
                - develop
          requires:
            - testflight_ios
      - test_e2e_ios:
          filters:
            branches:
              only:
                - develop
          requires:
            - check_ios
            - check_android
